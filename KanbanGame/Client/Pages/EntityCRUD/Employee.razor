@page "/employee"
@page "/employee/{id:int}"
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager

@if (Id is null)
{
    <PageTitle>Create a new Employee</PageTitle>
    <h3>Create a new Employee</h3>
}
else
{
    <PageTitle>Edit @employee.Name</PageTitle>
    <h3>Edit @employee.Name <img src=@(employee.AvatarPath == null ? "Avatars/Default.png" : employee.AvatarPath) style="height:64px; padding-left: 32px"></h3>
}

<EditForm Model="employee" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="employee.Name" class="form-control" />
    </div>
    <div>
        <label for="CurrentRole">Current Role</label>
        <InputSelect id="currentRole" @bind-Value="employee.Roles.CurrentRole" class="form-control">
            @foreach (var role in Enum.GetValues(typeof(KanbanGame.Shared.Role.EmployeeRole)))
            {
                <option value="@role">@role</option>
            }
        </InputSelect>
    </div>
    <div>
        <label for="seniority">Seniority</label>
        <InputSelect id="seniority" @bind-Value="employee.Roles.Seniority" class="form-control">
            @foreach (var seniority in Enum.GetValues(typeof(KanbanGame.Shared.Role.EmployeeSeniority)))
            {
                <option value="@seniority">@seniority</option>
            }
        </InputSelect>
    </div>
    <div>
        <label for="status">Status</label>
        <InputSelect id="status" @bind-Value="employee.Roles.Status" class="form-control">
            @foreach (var status in Enum.GetValues(typeof(KanbanGame.Shared.Role.EmployeeStatus)))
            {
                <option value="@status">@status</option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger"
            @onclick="DeleteEmployee">
        Delete Employee
    </button>
</EditForm>

@code {
    
    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;
    private HubConnection? hubConnection;

    KanbanGame.Shared.Employee employee =
        new KanbanGame.Shared.Employee{
            Id = 0,
            Name = "Name",
            Roles = new Role(){
                Seniority = KanbanGame.Shared.Role.EmployeeSeniority.Junior, 
                Status = KanbanGame.Shared.Role.EmployeeStatus.Working
            },
        };

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Save New Employee" : "Update Emplyee";
        await Connect();
    }
    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/BoardHub"))
            .Build();
    
        await hubConnection.StartAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await EmployeeService.GetEmployeeById((int)Id);
            if (result is not null)
                employee = result;
            else
                NavigationManager.NavigateTo("/employee");
        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await EmployeeService.CreateEmployee(employee);
        }
        else
        {
            await EmployeeService.UpdateEmployee((int)Id, employee);
            NavigationManager.NavigateTo("/employees");
        }
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
        }
    }

    async Task DeleteEmployee()
    {
        await EmployeeService.DeleteEmployee(employee.Id);
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
        }
    }
}