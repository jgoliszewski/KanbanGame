@page "/board"
@inject IKanbanTaskService KanbanTaskService
@inject IEmployeeService EmployeeService
@inject ICardService CardService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<SfKanban @ref="kanbanBoard" TValue="KanbanGame.Shared.Card" KeyField="Column" DataSource="CardService.Cards" Width="1800px">
    <KanbanColumns>
        <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"Backlog"})" TransitionColumns="@(new List<string>() {"Analysis"})" AllowAdding="true"></KanbanColumn>
        <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"Analysis"})" TransitionColumns="@(new List<string>() {"Backlog", "Analysis", "DevelopmentDoing", "TestDoing"})"></KanbanColumn>
        <KanbanColumn HeaderText="Waiting" KeyField="@(new List<string>() {"DevelopmentWaiting"})" TransitionColumns="@(new List<string>() {"DevelopmentDoing"})"></KanbanColumn>
        <KanbanColumn HeaderText="Doing" KeyField="@(new List<string>() {"DevelopmentDoing"})" TransitionColumns="@(new List<string>() {"DevelopmentWaiting", "Analysis", "DevelopmentDoing", "TestDoing"})"></KanbanColumn>
        <KanbanColumn HeaderText="Waiting" KeyField="@(new List<string>() {"TestWaiting"})" TransitionColumns="@(new List<string>() {"TestDoing"})"></KanbanColumn>
        <KanbanColumn HeaderText="Doing" KeyField="@(new List<string>() {"TestDoing"})" TransitionColumns="@(new List<string>() {"TestWaiting", "Analysis", "DevelopmentDoing", "TestDoing"})"></KanbanColumn>
        <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"Delivered"})" AllowDrag="false"></KanbanColumn>
    </KanbanColumns>
    <KanbanStackedHeaders>
        <KanbanStackedHeader Text="Backlog" KeyFields="@(new List<string>() {"Backlog"})"></KanbanStackedHeader>
        <KanbanStackedHeader Text="Analysis" KeyFields="@(new List<string>() {"Analysis"})"></KanbanStackedHeader>
        <KanbanStackedHeader Text="Development" KeyFields="@(new List<string>() {"DevelopmentWaiting", "DevelopmentDoing"})"></KanbanStackedHeader>
        <KanbanStackedHeader Text="Test" KeyFields="@(new List<string>() {"TestWaiting", "TestDoing"})"></KanbanStackedHeader>
        <KanbanStackedHeader Text="Delivered" KeyFields="@(new List<string>() {"Delivered"})"></KanbanStackedHeader>
    </KanbanStackedHeaders>
    <KanbanEvents TValue="KanbanGame.Shared.Card" DragStart="@DragStartHandler" DragStop="@DragStopHandler"></KanbanEvents>
    <KanbanCardSettings HeaderField="Id">
        <Template>
            @{
                KanbanGame.Shared.Card card = (KanbanGame.Shared.Card)context;
                    @* <div>@card.Id</div>
                <div>@card.Column</div> *@

                if (card.KanbanTask is null && card.Employee is not null)
              {
                    KanbanGame.Shared.Employee employee = card.Employee;
    
                    <div     class="employee-card">
                            <div class="employee-h">@employee.Name</div>
                            <div class="employee-a"><img src=@(employee.AvatarPath == null ? "Avatars/Default.png" : card.Employee.AvatarPath) style="width:48px" alt="logo" /></div>
                        <div     class="employee-d">
                                <div>Id: @employee.Id</div>
                                <div>Seniority: @employee.Seniority.ToString()</div>
                                <div>Status: @employee.Status</div>
                                <div>Role: @employee.CurrentRole</div>
                                <div>Column: @employee.CurrentRoleString</div>
                            </div>
                    </div>

                }
                else if (card.Employee is null && card.KanbanTask is not null)
                {
                        KanbanGame.Shared.KanbanTask kanbanTask = card.KanbanTask;
    
                    <div     class="task-card">
                          <div   class="task-h">@kanbanTask.Title</div>
                            <div class="task-d">
                                <div>Id: @kanbanTask.Id</div>
                                <div>Desc: @kanbanTask.Description</div>
                                <div>Ass. Id: @(kanbanTask.Employee is null ? "-" : kanbanTask.EmployeeId)</div>
                                <div>Assignee.: @(kanbanTask.Employee == null ? "-" : kanbanTask.Employee.Name)</div>
                            </div>
                        <div class="task-f">Status: @kanbanTask.StatusString</div>
                    </div>
                }
            }
        </Template>
    </KanbanCardSettings>
</SfKanban>

<style>
.e-item-count{
    content-visibility: hidden;
}
.task-card {  
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 0.5fr 2fr 0.5fr;
    gap: 10px 10px;
    grid-auto-flow: row;
    grid-template-areas:
        "h"
        "d"
        "f";
    padding-top: 10px;
    padding-left: 15px;
}

.task-h { 
    grid-area: h;
    text-align: center;
}

.task-d { 
    grid-area: d; 
    line-height: 120%;
}

.task-f { 
    grid-area: f;
}



.employee-card {  
    display: grid;
    grid-template-columns: 1fr 2fr;
    grid-template-rows: 1fr 3fr;
    gap: 5px 5px;
    grid-auto-flow: row;
    grid-template-areas:
        "h h"
        "a d";
    padding-top: 5px;
    padding-left: 10px;
}
.employee-h { 
    grid-area: h;
    text-align: center;
}

.employee-a { 
    grid-area: a;
}

.employee-d { 
    grid-area: d; 
    line-height: 120%;
}

</style>



@code {
    public SfKanban<KanbanGame.Shared.Card> kanbanBoard;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await KanbanTaskService.GetKanbanTasks();
        await CardService.GetCards();
        await Connect();
    }

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/BoardHub"))
                .Build();

        await hubConnection.StartAsync();

        hubConnection.On<int>("BoardUpdated", async (boardId) =>
                {
                    // reload data
                    await CardService.GetCards();
                    StateHasChanged();
                });
    }

    private string? columnBeforeDrag;
    private string[] taskForbiddenSwap = {"Analysis", "DevelopmentDoing", "TestDoing"};
    private string[] employeeForbidenSwap = {"Backlog", "DevelopmentWaiting", "TestWaiting"};

    async Task DragStartHandler(DragEventArgs<KanbanGame.Shared.Card> args)
    {
        columnBeforeDrag = args.Data[0].Column;
    }

    async Task DragStopHandler(DragEventArgs<KanbanGame.Shared.Card> args)
    {
        KanbanGame.Shared.Card draggedCard = args.Data[0];
        if (draggedCard.Employee is null && draggedCard.KanbanTask is not null)

        { 
            if(taskForbiddenSwap.Contains(columnBeforeDrag) && taskForbiddenSwap.Contains(draggedCard.Column))
            {
                args.Cancel = true;
            }
            else
            {
                draggedCard.KanbanTask.StatusString = draggedCard.Column;
                await CardService.UpdateCard(draggedCard.Id, draggedCard);
                if (hubConnection is not null)
                {
                    await hubConnection.SendAsync("UpdateBoard", 0);
                }
            }
        }
        else if (draggedCard.KanbanTask is null && draggedCard.Employee is not null)
        {
            if (employeeForbidenSwap.Contains(draggedCard.Column))
            {
                args.Cancel = true;
            }
            else
            {
                draggedCard.Employee.CurrentRoleString = draggedCard.Column;
                await CardService.UpdateCard(draggedCard.Id, draggedCard);
                if (hubConnection is not null)
                {
                    await hubConnection.SendAsync("UpdateBoard", 0);
                }
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}