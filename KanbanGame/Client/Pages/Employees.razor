@page "/employees"
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3>Employees</h3>

<table class="table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Seniority</th>
            <th>Status</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var employee in EmployeeService.Employees)
        {
            <tr>
                <td>@employee.Id</td>
                <td>@employee.Name</td>
                <td>@employee.Seniority</td>
                <td>@employee.Status</td>
                <td>
                    <button class="btn btn-primary"
                        @onclick="(() => ShowEmployee(employee.Id))">
                        <i class="oi oi-pencil"></i>
                    </button>
                    <button class="btn btn-danger"
                        @onclick="(() => DeleteEmployee(employee.Id))">
                        <i class="oi oi-trash"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary"
        @onclick="CreateNewEmployee">
    Create New Employee
</button>

@code {
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await EmployeeService.GetEmployees();
        await Connect();
    }

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/EmployeeHub"))
            .Build();
    
        await hubConnection.StartAsync();

        hubConnection.On<int>("EmployeeListUpdated", async (EmployeeId) => 
            {
                // reload data
                await EmployeeService.GetEmployees();
                StateHasChanged();
            });
    }
    
    void ShowEmployee(int id)
    {
        NavigationManager.NavigateTo($"/Employee/{id}");
    }

    void CreateNewEmployee()
    {
        NavigationManager.NavigateTo("/Employee");
    }
    async Task DeleteEmployee(int EmployeeId)
    {
        await EmployeeService.DeleteEmployee(EmployeeId);

        // opt1: faster - manualy remove element from list - no reload but problems
        EmployeeService.Employees.RemoveAll(t => t.Id == EmployeeId);

        // opt2: slow - remove only using service, but page needs force reload
        // NavigationManager.NavigateTo("/Employees", true); 

        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateEmployeeList", 0);
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}