@inject IFeatureService FeatureService
@inject IBoardService BoardService
@inject NavigationManager NavigationManager


<div>
    <div class="center">
        <h4 style="center">Users ready: @ReadyUserCount / @ConnectedUserCount</h4>
    </div>
    
    <button disabled="@IsUpdateDisabled" class="btn btn-outline-warning" @onclick="(() => OnSimulateDayHandler())">
        Update <i class="oi oi-sun"></i>
    </button>

    <input type="radio" class="btn-check" name="options-outlined" id="danger-outlined" checked="@IsReadySelected">
    <label class="btn btn-outline-danger" for="danger-outlined" @onclick="(() => OnStateReadyNotHandler())">Not Ready</label>

    <input type="radio" class="btn-check" name="options-outlined" id="success-outlined" checked="@IsNotReadySelected" onchange="@(() => SetReady())">
    <label class="btn btn-outline-success" for="success-outlined" @onclick="(() => OnStateReadyHandler())">Ready</label>

    <button class="btn btn-outline-primary" @onclick="(() => OnSimulateDayHandler())">
            Force Update
    </button>
</div>


@code {
    private bool IsReadySelected = true;
    [Parameter]
    public bool IsUpdateDisabled { get; set; }
    private bool IsNotReadySelected = false;
    [Parameter]
    public int ReadyUserCount { get; set; }
    [Parameter]
    public int ConnectedUserCount { get; set; }

    [Parameter]
    public EventCallback OnSimulateDay { get; set; }
    protected async Task OnSimulateDayHandler()
    {
        await OnSimulateDay.InvokeAsync();
    }

    [Parameter]
    public EventCallback OnStateReady { get; set; }
    protected async Task OnStateReadyHandler()
    {
        await OnStateReady.InvokeAsync();
    }

    [Parameter]
    public EventCallback OnStateNotReady { get; set; }
    protected async Task OnStateReadyNotHandler()
    {
        await OnStateNotReady.InvokeAsync();
    }

    private void SetReady()
    {
        IsReadySelected = false;
        IsNotReadySelected = true;
    }
    public void ResetReadiness()
    {
        IsReadySelected = true;
        IsNotReadySelected = false;
    }
}