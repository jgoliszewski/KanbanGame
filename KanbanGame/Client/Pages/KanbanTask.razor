@page "/kanbanTask"
@page "/kanbanTask/{id:int}"
@inject IKanbanTaskService KanbanTaskService
@inject IEmployeeService EmployeeService
@inject NavigationManager NavigationManager

@if (Id is null)
{
        <PageTitle>Create a new Task</PageTitle>
        <h3>Create a new Task</h3>
}
else
{
        <PageTitle>Edit @kanbanTask.Title</PageTitle>
        <h3>Edit @kanbanTask.Title</h3>
}

<EditForm Model="kanbanTask" OnSubmit="HandleSubmit">
    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="kanbanTask.Title" class="form-control" />
    </div>
    <div>
        <label for="description">Description</label>
        <InputText id="category" @bind-Value="kanbanTask.Description" class="form-control" />
    </div>
    <div>
        <label for="status">Status</label>
        <InputSelect id="status" @bind-Value="kanbanTask.Status" class="form-control">
            @foreach (var status in Enum.GetValues(typeof(KanbanGame.Shared.KanbanTask.TaskStatus)))
            {
                    <option value="@status">@status</option>
            }
        </InputSelect>
    </div>
    <div>
        <label for="employee">Employee</label>
        <InputSelect id="employee" @bind-Value="kanbanTask.EmployeeId" class="form-control">
            <option value="-1"></option>
            @foreach (var employee in EmployeeService.Employees)
            {
                    <option value="@employee.Id">@employee.Name</option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger"
            @onclick="DeleteKanbanTask">
        Delete Task
    </button>
</EditForm>

@code {

    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;
    private HubConnection? hubConnection;

    KanbanGame.Shared.KanbanTask kanbanTask =
        new KanbanGame.Shared.KanbanTask{
            Id = 0,
            Title = "New Task",
            Description = "Description",
            Status = KanbanGame.Shared.KanbanTask.TaskStatus.Backlog
        };

    protected override async Task OnInitializedAsync()
    {
        await EmployeeService.GetEmployees();
        btnText = Id == null ? "Save New Task" : "Update Task";
        await Connect();
    }
    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/BoardHub"))
            .Build();

        await hubConnection.StartAsync();
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await KanbanTaskService.GetKanbanTaskById((int)Id);
            if (result is not null)
                kanbanTask = result;
            else
                NavigationManager.NavigateTo("/kanbanTask");
        }
    }

    async Task HandleSubmit()
    {
        if(kanbanTask.EmployeeId != -1) // check if Employee is selectd
        {
            kanbanTask.Employee = EmployeeService.Employees.Where(e => e.Id == kanbanTask.EmployeeId).FirstOrDefault();
        }
        else
        {
            kanbanTask.Employee = null;
            kanbanTask.EmployeeId = null;
        }

        if (Id is null)
        {
            await KanbanTaskService.CreateKanbanTask(kanbanTask);
        }
        else
        {
            await KanbanTaskService.UpdateKanbanTask((int)Id, kanbanTask);
            NavigationManager.NavigateTo("kanbanTasks");
        }
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
        }
    }

    async Task DeleteKanbanTask()
    {
        await KanbanTaskService.DeleteKanbanTask(kanbanTask.Id);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
        }
    }
}