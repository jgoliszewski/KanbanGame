@page "/FrontEndBoard"
@inject ISessionService SessionService
@inject IKanbanTaskService KanbanTaskService
@inject IEmployeeService EmployeeService
@inject IBoardService BoardService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using Components

<div class="center">
<div class="board-page">
    <div class="board-page-h">
        <h3>FrontEnd Team</h3>
    </div>
    <div class="board-page-c">
        <KanbanGame.Client.Pages.Components.Calendar Session=SessionService.Session/>
    </div>
    <div class="board-page-a">
        <KanbanGame.Client.Pages.Components.SimulationButtons @ref="SimulationButtons" IsUpdateDisabled="isUpdateDisabled" ReadyUserCount="readyUserCount" ConnectedUserCount="connectedUserCount" OnSimulateDay="SimulateDay" OnStateReady="StateReady" OnStateNotReady="StateNotReady"/>
    </div>
    <div class="board-page-b">
        <div class="stacked-header" style="width: 1788px">
            <div class="stacked-header-title" style="flex-grow: 245;background:var(--gray-dark)">Backlog</div>
            <div class="stacked-header-title" style="flex-grow: 245;background:var(--green)">Analysis</div>
            <div class="stacked-header-title" style="flex-grow: 500;background:var(--blue)">Development</div>
            <div class="stacked-header-title" style="flex-grow: 498;background:var(--red)">Test</div>
            <div class="stacked-header-title" style="flex-grow: 245;background:var(--gray-darker)">Delivered</div>
        </div>
        <SfKanban TValue="Card" KeyField="Column" DataSource="BoardService.Cards" Width="1800px">
        <KanbanColumns>
            <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"Backlog"})" TransitionColumns="@(new List<string>() {"AnalysisDoing"})"></KanbanColumn>
            <KanbanColumn HeaderText="Doing" MaxCount="@BoardService.ColumnMaxCount["AnalysisDoing"]" KeyField="@(new List<string>() {"AnalysisDoing"})" TransitionColumns="@(new List<string>() {"Backlog", "AnalysisDoing", "DevelopmentDoing", "TestDoing"})"></KanbanColumn>
            <KanbanColumn HeaderText="Waiting" KeyField="@(new List<string>() {"DevelopmentWaiting"})" TransitionColumns="@(new List<string>() {"DevelopmentDoing"})"></KanbanColumn>
            <KanbanColumn HeaderText="Doing" MaxCount="@BoardService.ColumnMaxCount["DevelopmentDoing"]" KeyField="@(new List<string>() {"DevelopmentDoing"})" TransitionColumns="@(new List<string>() {"DevelopmentWaiting", "AnalysisDoing", "DevelopmentDoing", "TestDoing"})"></KanbanColumn>
            <KanbanColumn HeaderText="Waiting" KeyField="@(new List<string>() {"TestWaiting"})" TransitionColumns="@(new List<string>() {"TestDoing"})"></KanbanColumn>
            <KanbanColumn HeaderText="Doing" MaxCount="@BoardService.ColumnMaxCount["TestDoing"]" KeyField="@(new List<string>() {"TestDoing"})" TransitionColumns="@(new List<string>() {"TestWaiting", "AnalysisDoing", "DevelopmentDoing", "TestDoing"})"></KanbanColumn>
            <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"Delivered"})" AllowDrag="false"></KanbanColumn>
        </KanbanColumns>
        <KanbanSortSettings SortBy="SortOrderBy.Index" Field="RankId"></KanbanSortSettings>
        <KanbanEvents TValue="Card" DragStart="@DragStartHandler" DragStop="@DragStopHandler" CardDoubleClick="@CardDoubleClickHandler"></KanbanEvents>
        <KanbanCardSettings HeaderField="Id">
            <Template>
            @{
                Card card = (Card)context;

                if (card.Employee is not null)
                {
                    <KanbanGame.Client.Pages.Components.EmployeeCard employee=card.Employee OnEmployeeChanged="UpdateBoard"/>
                }
                else if (card.KanbanTask is not null)
                {
                    <KanbanGame.Client.Pages.Components.KanbanTaskCard kanbanTask=card.KanbanTask OnTaskChanged="UpdateBoard"/>
                }
            }
            </Template>
        </KanbanCardSettings>
        </SfKanban>
    </div>
</div>
</div>
@code {
    private int BoardId = (int) Team.TeamName.FrontEnd;
    private SimulationButtons SimulationButtons;

    protected override async Task OnInitializedAsync()
    {
        await BoardService.GetCardsByTeamId(BoardId);
        await Connect();
    }
    
    private string? columnBeforeDrag;
    private string? columnAfterDrag;
    private string[] taskForbiddenSwap = { "AnalysisDoing", "DevelopmentDoing", "TestDoing" };
    private string[] employeeForbidenColumn = { "Backlog", "DevelopmentWaiting", "TestWaiting" };

    async Task DragStartHandler(DragEventArgs<Card> args)
    {
        columnBeforeDrag = args.Data[0].Column;
        Card draggedCard = args.Data[0];
        if (draggedCard.KanbanTask is not null){
            if (draggedCard.KanbanTask.DependencyTask is not null && draggedCard.KanbanTask.DependencyTask.Status != KanbanTask.TaskStatus.Delivered)
            {
                Console.WriteLine("dupa");
                args.Cancel = true;
            }
        }
    }

    async Task DragStopHandler(DragEventArgs<Card> args)
    {

        Card draggedCard = args.Data[0];
        columnAfterDrag = draggedCard.Column;

        if (draggedCard.KanbanTask is not null)
        {
            if (draggedCard.KanbanTask.DependencyTask is not null && draggedCard.KanbanTask.DependencyTask.Status != KanbanTask.TaskStatus.Delivered)
            {
                args.Cancel = true;
            }
            if (columnBeforeDrag != draggedCard.Column && taskForbiddenSwap.Contains(columnBeforeDrag) && taskForbiddenSwap.Contains(draggedCard.Column))
            {
                args.Cancel = true;
            }
            else
            {
                await BoardService.UpdateCardLocal(draggedCard.Id, draggedCard);
                await BoardService.UpdateColumn(columnBeforeDrag);
                await BoardService.UpdateColumn(columnAfterDrag);

                if (hubConnection is not null)
                {
                    await hubConnection.SendAsync("UpdateBoard", 0);
                }
            }
        }
        else if (draggedCard.Employee is not null)
        {
            if (employeeForbidenColumn.Contains(columnAfterDrag))
            {
                args.Cancel = true;
            }
            else
            {
                await BoardService.UpdateCardLocal(draggedCard.Id, draggedCard);
                await BoardService.UpdateColumn(columnBeforeDrag);
                await BoardService.UpdateColumn(columnAfterDrag);

                if (hubConnection is not null)
                {
                    await hubConnection.SendAsync("UpdateBoard", 0);
                }
            }
        }
    }

    public void CardDoubleClickHandler(CardClickEventArgs<Card> args)
    {
        args.Cancel = true;
    }

    async Task SimulateDay()
    {
        await SessionService.SimulateDay();
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
            await hubConnection.SendAsync("ClearReadyUsers", 0);
        }
    }

    async Task ChangeIconState(KanbanTask kanbanTask, string icon)
    {
        switch(icon){
            case "star":
                kanbanTask.Star = !(kanbanTask.Star);
                break;
            case "warning":
                kanbanTask.Warning = !(kanbanTask.Warning);
                break;
            case "pause":
                kanbanTask.Pause = !(kanbanTask.Pause);
                break;
        }
        await KanbanTaskService.UpdateKanbanTask(kanbanTask.Id, kanbanTask);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
        }
    }

    @* -------------------- Hub -------------------- *@
    private HubConnection? hubConnection;
    private int connectedUserCount = 0;
    private int readyUserCount = 0;
    protected bool isUpdateDisabled = true;
    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/BoardHub"))
                .Build();

        await hubConnection.StartAsync();

        hubConnection.On<int>("BoardUpdated", async (_) =>
                {
                    await BoardService.GetCardsByTeamId(BoardId);
                    await SessionService.GetSessionInfo();
                    StateHasChanged();
                });
        hubConnection.On<int>("StateReady", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    isUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("StateNotReady", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    isUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("ClearReadyUsers", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    SimulationButtons.ResetReadiness();
                    isUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("UserCount", async (numberOfConnectedClients) =>
                {
                    connectedUserCount = numberOfConnectedClients;
                    isUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
    }

    async Task UpdateBoard()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
        }
    }

    async Task StateReady()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StateReady", 0);
        }
    }
    async Task StateNotReady()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StateNotReady", 0);
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}