@page "/featureBoard"
@inject IFeatureService FeatureService
@inject IBoardService BoardService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="center">
    <h3>Feature Board</h3>
</div>
<div class="center">
    @* <button disabled="@IsForceUpdateDisabled" class="btn btn-outline-warning" @onclick="(() => SimulateBoard())">
            Force Update <i class="oi oi-sun"></i>
    </button> *@
    <button class="btn btn-outline-warning" @onclick="(() => SimulateBoard())">
            Force Update <i class="oi oi-sun"></i>
    </button>

    <input type="radio" class="btn-check" name="options-outlined" id="danger-outlined" checked="@IsReadySelected">
    <label class="btn btn-outline-danger" for="danger-outlined" @onclick="(() => StateNotReady())">Not Ready</label>

    <input type="radio" class="btn-check" name="options-outlined" id="success-outlined" checked="@IsNotReadySelected" onchange="@(() => SetReady())">
    <label class="btn btn-outline-success" for="success-outlined" @onclick="(() => StateReady())">Ready</label>

    <div style="margin:10px;font-size: large;">Users ready: @readyUserCount / @connectedUserCount</div>

</div>
<div class="center">
<SfKanban TValue="Feature" KeyField="SF_PercentageColumn" DataSource="FeatureService.Features" Width="1800px" AllowDragAndDrop="false">
    <KanbanColumns>
        <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"None"})"></KanbanColumn>
        <KanbanColumn HeaderText="<20%" KeyField="@(new List<string>() {"Zero_Twenty"})"></KanbanColumn>
        <KanbanColumn HeaderText="<40%" KeyField="@(new List<string>() {"Twenty_Forty"})"></KanbanColumn>
        <KanbanColumn HeaderText="<60%" KeyField="@(new List<string>() {"Forty_Sixty"})"></KanbanColumn>
        <KanbanColumn HeaderText="<80%" KeyField="@(new List<string>() {"Sixty_Eighty"})"></KanbanColumn>
        <KanbanColumn HeaderText="<100%" KeyField="@(new List<string>() {"Eighty_Hundred"})"></KanbanColumn>
        <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"Hundred"})"></KanbanColumn>
    </KanbanColumns>
    <KanbanStackedHeaders>
        <KanbanStackedHeader Text="Backlog" KeyFields="@(new List<string>() {"None"})"></KanbanStackedHeader>
        <KanbanStackedHeader Text="Doing" KeyFields="@(new List<string>() {"Zero_Twenty", "Twenty_Forty", "Forty_Sixty", "Sixty_Eighty", "Eighty_Hundred"})"></KanbanStackedHeader>
        <KanbanStackedHeader Text="Delivered" KeyFields="@(new List<string>() {"Hundred"})"></KanbanStackedHeader>
    </KanbanStackedHeaders>
    <KanbanCardSettings HeaderField="Id">
        <Template>
        @{        
            Feature feature = (Feature)context;
            if(feature.Status == Feature.FeatureStatus.ReadyForDevelopment || feature.Status == Feature.FeatureStatus.UnderDevelopment)
            {
                <div class="task-card">
                    <div class="task-h">@feature.Title</div>
                    <div class="task-d">
                        <b>@($"Est. $: {feature.EstimatedMinEarnings}K-{feature.EstimatedMaxEarnings}K")</b>
                        <div>Id: @feature.Id</div>
                        @* <div>Desc: @feature.Description</div> *@    
                        <div>Task count: @feature.KanbanTasks.Count</div>
                        <div>Delivered: @(Math.Round(feature.DeliveredTaskPercentage*100, 1)) %</div>
                    </div>
                <div class="task-f"></div>
            </div>
            }
            else
            {
                <div class="task-card">
                    <div class="task-h">@feature.Title</div>
                    <div class="task-d">
                        <div>Id: @feature.Id</div>
                        <div>Desc: @feature.Description</div>    
                    </div>
                <div class="task-f"></div>
            </div>
            }
            
        }
        </Template>
    </KanbanCardSettings>
</SfKanban>
</div>
@code {
    protected override async Task OnInitializedAsync()
    {
        await FeatureService.GetActiveFeatures();
        await Connect();
    }
    async Task SimulateBoard()
    {
        await BoardService.SimulateBoard();
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
            await hubConnection.SendAsync("ClearReadyUsers", 0);
        }
    }
    @* -------------------- Hub -------------------- *@
    private HubConnection? hubConnection;
    private int connectedUserCount = 0;
    private int readyUserCount = 0;
    protected bool IsForceUpdateDisabled = true;
    private bool IsReadySelected = true;
    private bool IsNotReadySelected = false;
    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/BoardHub"))
                .Build();

        await hubConnection.StartAsync();

        hubConnection.On<int>("BoardUpdated", async (_) =>
                {
                    await FeatureService.GetActiveFeatures();
                    StateHasChanged();
            });
        hubConnection.On<int>("StateReady", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("StateNotReady", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("ClearReadyUsers", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    ResetReadiness();
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("UserCount", async (numberOfConnectedClients) =>
                {
                    connectedUserCount = numberOfConnectedClients;
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
    }
    
    private void SetReady()
    {
        IsReadySelected = false;
        IsNotReadySelected = true;
    }
    private void ResetReadiness()
    {
        IsReadySelected = true;
        IsNotReadySelected = false;
    }
    async Task StateReady()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StateReady", 0);
        }
    }
    async Task StateNotReady()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StateNotReady", 0);
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}