@page "/featureBoard"
@inject ISessionService SessionService
@inject IFeatureService FeatureService
@inject IBoardService BoardService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<SfDialog Width="300px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsShowCardDetailsVisible">
    <DialogTemplates>
        <Header> 
            <h2>Feature: @FeatureToShowDetails.Title</h2>
        </Header>
        <Content> 
            <h5>Feature Info Info:</h5>
            <li>Id: @FeatureToShowDetails.Id</li>
            @{
                <h5>Feature Info:</h5>
                <li>Id: @FeatureToShowDetails.Id</li>
                <li>Title: @FeatureToShowDetails.Title</li>
                <li>Description: @FeatureToShowDetails.Description</li>
                <li>Status: @FeatureToShowDetails.Status</li>
                <li>Number of tasks: @FeatureToShowDetails.KanbanTasks.Count</li>
                <li>Est. earnings: @($"{FeatureToShowDetails.EstimatedMinEarnings}K-{FeatureToShowDetails.EstimatedMaxEarnings}K $")</li>
                
            }
        </Content>
    </DialogTemplates>
    <DialogEvents OnOverlayModalClick="@OverlayClick"></DialogEvents>
</SfDialog>

<div class="center">
<div class="board-page">
    <div class="board-page-h">
        <h3>Feature Board</h3>
    </div>
    <div class="board-page-c">
        <div>
            <div class="center">
                <h4>Day: @(SessionService.Session.Day) Week: @(SessionService.Session.Week)</h4>
            </div>
            @{
                string[] days = new string[5] { "letter_m", "letter_t", "letter_w", "letter_t", "letter_f" };
                days[(int)SessionService.Session.Weekday] += "_filled";
            }
            <img class="notifier" src=@($"Icons/letters/{days[0]}.png")/>
            <img class="notifier" src=@($"Icons/letters/{days[1]}.png")/>
            <img class="notifier" src=@($"Icons/letters/{days[2]}.png")/>
            <img class="notifier" src=@($"Icons/letters/{days[3]}.png")/>
            <img class="notifier" src=@($"Icons/letters/{days[4]}.png")/>
        </div>
    </div>
    <div class="board-page-a">
        @* <button disabled="@IsForceUpdateDisabled" class="btn btn-outline-warning" @onclick="(() => SimulateBoard())">
            Force Update <i class="oi oi-sun"></i>
        </button> *@
        <button class="btn btn-outline-warning" @onclick="(() => SimulateDay())">
                Force Update <i class="oi oi-sun"></i>
        </button>

        <input type="radio" class="btn-check" name="options-outlined" id="danger-outlined" checked="@IsReadySelected">
        <label class="btn btn-outline-danger" for="danger-outlined" @onclick="(() => StateNotReady())">Not Ready</label>

        <input type="radio" class="btn-check" name="options-outlined" id="success-outlined" checked="@IsNotReadySelected" onchange="@(() => SetReady())">
        <label class="btn btn-outline-success" for="success-outlined" @onclick="(() => StateReady())">Ready</label>

        <div style="margin:10px;font-size: large;">Users ready: @readyUserCount / @connectedUserCount</div>
    </div>
    <div class="board-page-b">
        <SfKanban TValue="Feature" KeyField="SF_PercentageColumn" DataSource="FeatureService.Features" Width="1800px" AllowDragAndDrop="false">
        <KanbanColumns>
            <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"None"})"></KanbanColumn>
            <KanbanColumn HeaderText="<20%" KeyField="@(new List<string>() {"Zero_Twenty"})"></KanbanColumn>
            <KanbanColumn HeaderText="<40%" KeyField="@(new List<string>() {"Twenty_Forty"})"></KanbanColumn>
            <KanbanColumn HeaderText="<60%" KeyField="@(new List<string>() {"Forty_Sixty"})"></KanbanColumn>
            <KanbanColumn HeaderText="<80%" KeyField="@(new List<string>() {"Sixty_Eighty"})"></KanbanColumn>
            <KanbanColumn HeaderText="<100%" KeyField="@(new List<string>() {"Eighty_Hundred"})"></KanbanColumn>
            <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"Hundred"})"></KanbanColumn>
        </KanbanColumns>
        <KanbanStackedHeaders>
            <KanbanStackedHeader Text="Backlog" KeyFields="@(new List<string>() {"None"})"></KanbanStackedHeader>
            <KanbanStackedHeader Text="Doing" KeyFields="@(new List<string>() {"Zero_Twenty", "Twenty_Forty", "Forty_Sixty", "Sixty_Eighty", "Eighty_Hundred"})"></KanbanStackedHeader>
            <KanbanStackedHeader Text="Delivered" KeyFields="@(new List<string>() {"Hundred"})"></KanbanStackedHeader>
        </KanbanStackedHeaders>
        <KanbanEvents TValue="Feature" CardDoubleClick="@CardDoubleClickHandler"></KanbanEvents>
        <KanbanCardSettings HeaderField="Id">
            <Template>
            @{        
                Feature feature = (Feature)context;
                if(feature.Status == Feature.FeatureStatus.ReadyForDevelopment || feature.Status == Feature.FeatureStatus.UnderDevelopment)
                {
                    <div class="task-card">
                        <div class="task-h">
                            @feature.Title
                            <img class="notifier" src="Icons/info.png" @onclick='(() => ShowFeatureDetails(feature))' style="float:right"/>
                        </div>
                        <div class="task-d">
                            <div>@($"Est. $: {feature.EstimatedMinEarnings}K-{feature.EstimatedMaxEarnings}K")</div>
                            @* <div>Id: @feature.Id</div> *@
                            @* <div>Desc: @feature.Description</div> *@    
                            @* <div>Task count: @feature.KanbanTasks.Count</div> *@
                            <div>Tasks(@(feature.KanbanTasks.Count)):</div>
                            @{
                                foreach (var t in feature.KanbanTasks)
                                {
                                    if(t.Status == KanbanTask.TaskStatus.Delivered)
                                    {
                                        <li><s>@t.Title</s></li>
                                    }
                                    else
                                    {
                                        <li>@t.Title</li>
                                    }
                                }
                            }
                            <div>Delivered: @(Math.Round(feature.DeliveredTaskPercentage*100, 1)) %</div>
                        </div>
                    <div class="task-f">
                    </div>
                </div>
                }
                else
                {
                    <div class="task-card">
                        <div class="task-h">@feature.Title</div>
                        <div class="task-d">
                            @* <div>Id: @feature.Id</div> *@
                            <div>Desc: @feature.Description</div>    
                        </div>
                    <div class="task-f"></div>
                </div>
                }
                
            }
            </Template>
        </KanbanCardSettings>
        </SfKanban>
    </div>
</div>
</div>




@code {
    private bool IsShowCardDetailsVisible { get; set; } = false;
    private Feature FeatureToShowDetails {get; set;}
    protected override async Task OnInitializedAsync()
    {
        await FeatureService.GetActiveFeatures();
        await Connect();
    }
    async Task SimulateDay()
    {
        await SessionService.SimulateDay();
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
            await hubConnection.SendAsync("ClearReadyUsers", 0);
        }
    }

    public void CardDoubleClickHandler(CardClickEventArgs<Feature> args)
    {
        args.Cancel = true;
    }

    private void ShowFeatureDetails(Feature feature)
    {
        FeatureToShowDetails = feature;
        this.IsShowCardDetailsVisible = true;
    }

    private void OverlayClick(OverlayModalClickEventArgs args)
    {
        this.IsShowCardDetailsVisible = false;
    }

    @* -------------------- Hub -------------------- *@
    private HubConnection? hubConnection;
    private int connectedUserCount = 0;
    private int readyUserCount = 0;
    protected bool IsForceUpdateDisabled = true;
    private bool IsReadySelected = true;
    private bool IsNotReadySelected = false;
    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/BoardHub"))
                .Build();

        await hubConnection.StartAsync();

        hubConnection.On<int>("BoardUpdated", async (_) =>
                {
                    await FeatureService.GetActiveFeatures();
                    await SessionService.GetSessionInfo();
                    StateHasChanged();
            });
        hubConnection.On<int>("StateReady", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("StateNotReady", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("ClearReadyUsers", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    ResetReadiness();
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("UserCount", async (numberOfConnectedClients) =>
                {
                    connectedUserCount = numberOfConnectedClients;
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
    }
    
    private void SetReady()
    {
        IsReadySelected = false;
        IsNotReadySelected = true;
    }
    private void ResetReadiness()
    {
        IsReadySelected = true;
        IsNotReadySelected = false;
    }
    async Task StateReady()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StateReady", 0);
        }
    }
    async Task StateNotReady()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StateNotReady", 0);
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}