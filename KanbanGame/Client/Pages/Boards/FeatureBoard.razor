@page "/featureBoard"
@inject ISessionService SessionService
@inject IFeatureService FeatureService
@inject IBoardService BoardService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@using Components

<div class="center">
<div class="board-page">
    <div class="board-page-h">
        <h3>Feature Board</h3>
    </div>
    <div class="board-page-c">
        <KanbanGame.Client.Pages.Components.Calendar Session=SessionService.Session/>
    </div>
    <div class="board-page-a">
        <KanbanGame.Client.Pages.Components.SimulationButtons @ref="SimulationButtons" IsUpdateDisabled="isUpdateDisabled" ReadyUserCount="readyUserCount" ConnectedUserCount="connectedUserCount" OnSimulateDay="SimulateDay" OnStateReady="StateReady" OnStateNotReady="StateNotReady"/>
    </div>
    <div class="board-page-b">
        <SfKanban TValue="Feature" KeyField="SF_PercentageColumn" DataSource="FeatureService.Features" Width="1800px" AllowDragAndDrop="false">
        <KanbanColumns>
            <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"None"})"></KanbanColumn>
            <KanbanColumn HeaderText="<20%" KeyField="@(new List<string>() {"Zero_Twenty"})"></KanbanColumn>
            <KanbanColumn HeaderText="<40%" KeyField="@(new List<string>() {"Twenty_Forty"})"></KanbanColumn>
            <KanbanColumn HeaderText="<60%" KeyField="@(new List<string>() {"Forty_Sixty"})"></KanbanColumn>
            <KanbanColumn HeaderText="<80%" KeyField="@(new List<string>() {"Sixty_Eighty"})"></KanbanColumn>
            <KanbanColumn HeaderText="<100%" KeyField="@(new List<string>() {"Eighty_Hundred"})"></KanbanColumn>
            <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"Hundred"})"></KanbanColumn>
        </KanbanColumns>
        <KanbanStackedHeaders>
            <KanbanStackedHeader Text="Backlog" KeyFields="@(new List<string>() {"None"})"></KanbanStackedHeader>
            <KanbanStackedHeader Text="Doing" KeyFields="@(new List<string>() {"Zero_Twenty", "Twenty_Forty", "Forty_Sixty", "Sixty_Eighty", "Eighty_Hundred"})"></KanbanStackedHeader>
            <KanbanStackedHeader Text="Delivered" KeyFields="@(new List<string>() {"Hundred"})"></KanbanStackedHeader>
        </KanbanStackedHeaders>
        <KanbanEvents TValue="Feature" CardDoubleClick="@CardDoubleClickHandler"></KanbanEvents>
        <KanbanCardSettings HeaderField="Id">
            <Template>
            @{        
                Feature feature = (Feature)context;
                <KanbanGame.Client.Pages.Components.FeatureInfoCard feature="feature"/>
            }
            </Template>
        </KanbanCardSettings>
        </SfKanban>
    </div>
</div>
</div>

@code {
    private SimulationButtons SimulationButtons;
    protected override async Task OnInitializedAsync()
    {
        await FeatureService.GetActiveFeatures();
        await Connect();
    }
    async Task SimulateDay()
    {
        await SessionService.SimulateDay();
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
            await hubConnection.SendAsync("ClearReadyUsers", 0);
        }
    }

    public void CardDoubleClickHandler(CardClickEventArgs<Feature> args)
    {
        args.Cancel = true;
    }

    @* -------------------- Hub -------------------- *@
    private HubConnection? hubConnection;
    private int connectedUserCount = 0;
    private int readyUserCount = 0;
    protected bool isUpdateDisabled = true;
    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/BoardHub"))
                .Build();

        await hubConnection.StartAsync();

        hubConnection.On<int>("BoardUpdated", async (_) =>
                {
                    await FeatureService.GetActiveFeatures();
                    await SessionService.GetSessionInfo();
                    StateHasChanged();
            });
        hubConnection.On<int>("StateReady", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    isUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("StateNotReady", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    isUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("ClearReadyUsers", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    SimulationButtons.ResetReadiness();
                    isUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("UserCount", async (numberOfConnectedClients) =>
                {
                    connectedUserCount = numberOfConnectedClients;
                    isUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
    }
    
    async Task StateReady()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StateReady", 0);
        }
    }
    async Task StateNotReady()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StateNotReady", 0);
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}