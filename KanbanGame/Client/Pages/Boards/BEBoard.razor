@page "/BackEndboard"
@inject ISessionService SessionService
@inject IKanbanTaskService KanbanTaskService
@inject IEmployeeService EmployeeService
@inject IBoardService BoardService
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<SfDialog Width="300px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsShowCardDetailsVisible">
    <DialogTemplates>
        <Header> 
            @{
                if (CardToShowDetails.Employee is not null)
                {
                                    <h2>Employee: @CardToShowDetails.Employee.Name</h2>
                }
                else if (CardToShowDetails.KanbanTask is not null)
                {
                                    <h2>Task: @CardToShowDetails.KanbanTask.Title</h2>
                }
                else if (CardToShowDetails.Feature is not null)
                {
                                    <h2>Feature: @CardToShowDetails.Feature.Title</h2>
                }
            }
        </Header>
        <Content> 
            <h5>Card Info:</h5>
            <li>Id: @CardToShowDetails.Id</li>
            <li>RankId: @CardToShowDetails.RankId</li>
            <li>Team: @CardToShowDetails.Team</li>
            <li>Column: @CardToShowDetails.Column</li>
            @{
                if (CardToShowDetails.Employee is not null)
                {
                    var employee = CardToShowDetails.Employee;
                                    <h5>Employee Info:</h5>
                                    <li>Id: @employee.Id</li>
                                    <li>Name: @employee.Name</li>
                                    <li>Seniority: @employee.Seniority</li>
                                    <li>Productivity: @employee.Productivity</li>
                                    <li>Status: @employee.Status</li>
                                    <li>Role: @employee.CurrentRole</li>
                                    <img src=@(employee.AvatarPath == null ? "Avatars/Default.png" : employee.AvatarPath) style="width:48px;float:right;" alt="logo" />
                }
                else if (CardToShowDetails.KanbanTask is not null)
                {
                    var kanbanTask = CardToShowDetails.KanbanTask;
                                    <h5>Task Info:</h5>
                                    <li>Id: @kanbanTask.Id</li>
                                    <li>Title: @kanbanTask.Title</li>
                                    <li>Description: @kanbanTask.Description</li>
                                    <li>Status: @kanbanTask.Status</li>
                                    <li>Age: @kanbanTask.Age</li>
                                    <li>Base effort: @kanbanTask.Effort</li>
                                    <li>Effort left: @kanbanTask.EffortLeft</li>
                                    <li>Ass. Id: @(kanbanTask.Assignee is null ? "-" : kanbanTask.Assignee.Id)</li>
                                    <li>Assignee: @(kanbanTask.Assignee == null ? "-" : kanbanTask.Assignee.Name)</li>
                                    <li>Depends on: <b>@(kanbanTask.DependencyTask == null ? "-" : kanbanTask.DependencyTask.Title)</b></li>
                                    <li>DT. Status: @(kanbanTask.DependencyTask == null ? "-" : kanbanTask.DependencyTask.Status)</li>
                                    <img src=@(kanbanTask.Assignee == null ? "Avatars/Default.png" : kanbanTask.Assignee.AvatarPath) style="width:32px; float:right;" alt="logo" />
                }
                else if (CardToShowDetails.Feature is not null)
                {
                    var feature = CardToShowDetails.Feature;
                                    <h5>Feature Info:</h5>
                                    <li>Id: @feature.Id</li>
                                    <li>Title: @feature.Title</li>
                                    <li>Description: @feature.Description</li>
                                    <li>Status: @feature.Status</li>
                                    <li>Number of tasks: @feature.KanbanTasks.Count</li>
                                    <li>Est. earnings: @($"{feature.EstimatedMinEarnings}K-{feature.EstimatedMaxEarnings}K $")</li>
                                    <li>Base effort: @feature.Effort</li>
                                    <li>Effort left: @feature.EffortLeft</li>
                                    <li>Ass. Id: @(feature.Assignee is null ? "-" : feature.Assignee.Id)</li>
                                    <li>Assignee: @(feature.Assignee == null ? "-" : feature.Assignee.Name)</li>
                                    <img src=@(feature.Assignee == null ? "Avatars/Default.png" : feature.Assignee.AvatarPath) style="width:32px; float:right;" alt="logo" />
                }
            }
        </Content>
    </DialogTemplates>
    <DialogEvents OnOverlayModalClick="@OverlayClick"></DialogEvents>
</SfDialog>

<div class="center">
<div class="board-page">
    <div class="board-page-h">
        <h3>BackEnd Team</h3>
    </div>
    <div class="board-page-c">
        <div>
            <div class="center">
                <h4>Day: @(SessionService.Session.Day) Week: @(SessionService.Session.Week)</h4>
            </div>
                @{
                    string[] days = new string[5] { "letter_m", "letter_t", "letter_w", "letter_t", "letter_f" };
                    days[(int)SessionService.Session.Weekday] += "_filled";
                }
            <img class="notifier" src=@($"Icons/letters/{days[0]}.png")/>
            <img class="notifier" src=@($"Icons/letters/{days[1]}.png")/>
            <img class="notifier" src=@($"Icons/letters/{days[2]}.png")/>
            <img class="notifier" src=@($"Icons/letters/{days[3]}.png")/>
            <img class="notifier" src=@($"Icons/letters/{days[4]}.png")/>
        </div>
    </div>
    <div class="board-page-a">
            @* <button disabled="@IsForceUpdateDisabled" class="btn btn-outline-warning" @onclick="(() => SimulateBoard())">
            Force Update <i class="oi oi-sun"></i>
        </button> *@
        <button class="btn btn-outline-warning" @onclick="(() => SimulateDay())">
                Force Update <i class="oi oi-sun"></i>
        </button>

        <input type="radio" class="btn-check" name="options-outlined" id="danger-outlined" checked="@IsReadySelected">
        <label class="btn btn-outline-danger" for="danger-outlined" @onclick="(() => StateNotReady())">Not Ready</label>

        <input type="radio" class="btn-check" name="options-outlined" id="success-outlined" checked="@IsNotReadySelected" onchange="@(() => SetReady())">
        <label class="btn btn-outline-success" for="success-outlined" @onclick="(() => StateReady())">Ready</label>

        <div style="margin:10px;font-size: large;">Users ready: @readyUserCount / @connectedUserCount</div>
    </div>
    <div class="board-page-b">
        <div class="stacked-header" style="width: 1788px">
            <div class="stacked-header-title" style="flex-grow: 245;background:var(--gray-dark)">Backlog</div>
            <div class="stacked-header-title" style="flex-grow: 245;background:var(--green)">Analysis</div>
            <div class="stacked-header-title" style="flex-grow: 500;background:var(--blue)">Development</div>
            <div class="stacked-header-title" style="flex-grow: 498;background:var(--red)">Test</div>
            <div class="stacked-header-title" style="flex-grow: 245;background:var(--gray-darker)">Delivered</div>
        </div>
        <SfKanban TValue="Card" KeyField="Column" DataSource="BoardService.Cards" Width="1800px">
            <KanbanColumns>
                <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"Backlog"})" TransitionColumns="@(new List<string>() {"AnalysisDoing"})"></KanbanColumn>
                <KanbanColumn HeaderText="Doing" MaxCount="@BoardService.ColumnMaxCount["AnalysisDoing"]" KeyField="@(new List<string>() {"AnalysisDoing"})" TransitionColumns="@(new List<string>() {"Backlog", "AnalysisDoing", "DevelopmentDoing", "TestDoing"})"></KanbanColumn>
                <KanbanColumn HeaderText="Waiting" KeyField="@(new List<string>() {"DevelopmentWaiting"})" TransitionColumns="@(new List<string>() {"DevelopmentDoing"})"></KanbanColumn>
                <KanbanColumn HeaderText="Doing" MaxCount="@BoardService.ColumnMaxCount["DevelopmentDoing"]" KeyField="@(new List<string>() {"DevelopmentDoing"})" TransitionColumns="@(new List<string>() {"DevelopmentWaiting", "AnalysisDoing", "DevelopmentDoing", "TestDoing"})"></KanbanColumn>
                <KanbanColumn HeaderText="Waiting" KeyField="@(new List<string>() {"TestWaiting"})" TransitionColumns="@(new List<string>() {"TestDoing"})"></KanbanColumn>
                <KanbanColumn HeaderText="Doing" MaxCount="@BoardService.ColumnMaxCount["TestDoing"]" KeyField="@(new List<string>() {"TestDoing"})" TransitionColumns="@(new List<string>() {"TestWaiting", "AnalysisDoing", "DevelopmentDoing", "TestDoing"})"></KanbanColumn>
                <KanbanColumn HeaderText="" KeyField="@(new List<string>() {"Delivered"})" AllowDrag="false"></KanbanColumn>
            </KanbanColumns>
            <KanbanSortSettings SortBy="SortOrderBy.Index" Field="RankId"></KanbanSortSettings>
            <KanbanEvents TValue="Card" DragStart="@DragStartHandler" DragStop="@DragStopHandler" CardDoubleClick="@CardDoubleClickHandler"></KanbanEvents>
            <KanbanCardSettings HeaderField="Id">
                <Template>
                        @{
                            Card card = (Card)context;

                            if (card.Employee is not null)
                            {
                                Employee employee = card.Employee;

                                        <div class="employee-card">
                                            <div class="employee-h">
                                        @employee.Name
                                                <img class="notifier" src="Icons/info.png" @onclick='(() => ShowCardDetails(card))' style="float:right"/>
                                            </div>
                                            <div class="employee-a"><img src=@(employee.AvatarPath == null ? "Avatars/Default.png" : employee.AvatarPath) style="width:48px" alt="logo" /></div>
                                            <div class="employee-d">
                                                <div>Seniority: @employee.Seniority</div>
                                            </div>
                                            <div class="employee-f">
                                                <img class="notifier" src=@(!employee.IsHighLevelAnalyzer.HasValue ? "Icons/roles/letter_h_crossed.png" : employee.IsHighLevelAnalyzer.Value == true ? "Icons/roles/letter_h_filled.png" : "Icons/roles/letter_h_filled_light.png") />
                                                <img class="notifier" src=@(!employee.IsAnalyzer.HasValue ? "Icons/roles/letter_a_crossed.png" : employee.IsAnalyzer.Value == true ? "Icons/roles/letter_a_filled.png" : "Icons/roles/letter_a_filled_light.png") />
                                                <img class="notifier" src=@(!employee.IsDeveloper.HasValue ? "Icons/roles/letter_d_crossed.png" : employee.IsDeveloper.Value == true ? "Icons/roles/letter_d_filled.png" : "Icons/roles/letter_d_filled_light.png") />
                                                <img class="notifier" src=@(!employee.IsTester.HasValue ? "Icons/roles/letter_t_crossed.png" : employee.IsTester.Value == true ? "Icons/roles/letter_t_filled.png" : "Icons/roles/letter_t_filled_light.png") />
                                            </div>
                                        </div>
                            }
                            else if (card.KanbanTask is not null)
                            {
                                KanbanTask kanbanTask = card.KanbanTask;

                                        <div class="task-card">
                                            <div class="task-h">
                                        @{
                                            if (kanbanTask.Status != KanbanTask.TaskStatus.Delivered)
                                            {
                                                if (kanbanTask.DependencyTask is not null && kanbanTask.DependencyTask.Status != KanbanTask.TaskStatus.Delivered)
                                                {
                                                                                    <img class="notifier" src="Icons/block.png" style="float:left"/>
                                                }
                                                else
                                                {
                                                                                    <img src=@(kanbanTask.Assignee == null ? "Avatars/Default.png" : kanbanTask.Assignee.AvatarPath) style="width:32px; float:left;" alt="avatar" />
                                                }
                                            }
                                        }

                                                <b>@kanbanTask.Title</b>
                                                <img class="notifier" src="Icons/info.png" @onclick='(() => ShowCardDetails(card))' style="float:right"/>
                                            </div>
                                            <div class="task-d">
                                                <div>Age: @kanbanTask.Age</div>
                                                <div>Depends on: <b>@(kanbanTask.DependencyTask == null ? "-" : kanbanTask.DependencyTask.Title)</b></div>
                                            </div>
                                            <div class="task-f">
                                        @{
                                            if (kanbanTask.Status != KanbanTask.TaskStatus.Delivered)
                                            {
                                                                    <img class="notifier" src=@(kanbanTask.Star ? "Icons/star_filled.png" : "Icons/star.png") @onclick='(() => ChangeIconState(kanbanTask, "star"))'/>
                                                                    <img class="notifier" src=@(kanbanTask.Warning ? "Icons/warning_filled.png" : "Icons/warning.png") @onclick='(() => ChangeIconState(kanbanTask, "warning"))'/>
                                                                    <img class="notifier" src=@(kanbanTask.Pause ? "Icons/pause_filled.png" : "Icons/pause.png") @onclick='(() => ChangeIconState(kanbanTask, "pause"))'/>
                                            }
                                        }
                                            </div>
                                        </div>
                            }
                        }
                </Template>
            </KanbanCardSettings>
        </SfKanban>
    </div>
</div>
</div>
@code {
    private int BoardId = (int)Team.TeamName.BackEnd;
    private bool IsShowCardDetailsVisible { get; set; } = false;
    private Card CardToShowDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await BoardService.GetCardsByTeamId(BoardId);
        CardToShowDetails = BoardService.Cards[0];
        await SessionService.GetSessionInfo();
        await Connect();
    }

    private string? columnBeforeDrag;
    private string? columnAfterDrag;
    private string[] taskForbiddenSwap = { "AnalysisDoing", "DevelopmentDoing", "TestDoing" };
    private string[] employeeForbidenColumn = { "Backlog", "DevelopmentWaiting", "TestWaiting" };

    async Task DragStartHandler(DragEventArgs<Card> args)
    {
        columnBeforeDrag = args.Data[0].Column;
        Card draggedCard = args.Data[0];
        if (draggedCard.KanbanTask is not null)
        {
            if (draggedCard.KanbanTask.DependencyTask is not null && draggedCard.KanbanTask.DependencyTask.Status != KanbanTask.TaskStatus.Delivered)
            {
                Console.WriteLine("dupa");
                args.Cancel = true;
            }
        }
    }

    async Task DragStopHandler(DragEventArgs<Card> args)
    {

        Card draggedCard = args.Data[0];
        columnAfterDrag = draggedCard.Column;

        if (draggedCard.KanbanTask is not null)
        {
            if (columnBeforeDrag != draggedCard.Column && taskForbiddenSwap.Contains(columnBeforeDrag) && taskForbiddenSwap.Contains(draggedCard.Column))
            {
                args.Cancel = true;
            }
            else
            {
                await BoardService.UpdateCardLocal(draggedCard.Id, draggedCard);
                await BoardService.UpdateColumn(columnBeforeDrag);
                await BoardService.UpdateColumn(columnAfterDrag);

                if (hubConnection is not null)
                {
                    await hubConnection.SendAsync("UpdateBoard", 0);
                }
            }
        }
        else if (draggedCard.Employee is not null)
        {
            if (employeeForbidenColumn.Contains(draggedCard.Column))
            {
                args.Cancel = true;
            }
            else
            {
                await BoardService.UpdateCardLocal(draggedCard.Id, draggedCard);
                await BoardService.UpdateColumn(columnBeforeDrag);
                await BoardService.UpdateColumn(columnAfterDrag);

                if (hubConnection is not null)
                {
                    await hubConnection.SendAsync("UpdateBoard", 0);
                }
            }
        }
    }

    public void CardDoubleClickHandler(CardClickEventArgs<Card> args)
    {
        args.Cancel = true;
    }

    private void ShowCardDetails(Card card)
    {
        CardToShowDetails = card;
        this.IsShowCardDetailsVisible = true;
    }

    private void OverlayClick(OverlayModalClickEventArgs args)
    {
        this.IsShowCardDetailsVisible = false;
    }

    async Task SimulateDay()
    {
        await SessionService.SimulateDay();
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
            await hubConnection.SendAsync("ClearReadyUsers", 0);
        }
    }

    async Task ChangeIconState(KanbanTask kanbanTask, string icon)
    {
        switch (icon)
        {
            case "star":
                kanbanTask.Star = !(kanbanTask.Star);
                break;
            case "warning":
                kanbanTask.Warning = !(kanbanTask.Warning);
                break;
            case "pause":
                kanbanTask.Pause = !(kanbanTask.Pause);
                break;
        }
        await KanbanTaskService.UpdateKanbanTask(kanbanTask.Id, kanbanTask);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UpdateBoard", 0);
        }
    }

    @* -------------------- Hub -------------------- *@
    private HubConnection? hubConnection;
    private int connectedUserCount = 0;
    private int readyUserCount = 0;
    protected bool IsForceUpdateDisabled = true;
    private bool IsReadySelected = true;
    private bool IsNotReadySelected = false;
    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/BoardHub"))
                .Build();

        await hubConnection.StartAsync();

        hubConnection.On<int>("BoardUpdated", async (_) =>
                {
                    await BoardService.GetCardsByTeamId(BoardId);
                    await SessionService.GetSessionInfo();
                    StateHasChanged();
                });
        hubConnection.On<int>("StateReady", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("StateNotReady", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("ClearReadyUsers", async (numberOfReadyClients) =>
                {
                    readyUserCount = numberOfReadyClients;
                    ResetReadiness();
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
        hubConnection.On<int>("UserCount", async (numberOfConnectedClients) =>
                {
                    connectedUserCount = numberOfConnectedClients;
                    IsForceUpdateDisabled = readyUserCount == connectedUserCount ? false : true;
                    StateHasChanged();
                });
    }
    private void SetReady()
    {
        IsReadySelected = false;
        IsNotReadySelected = true;
    }
    private void ResetReadiness()
    {
        IsReadySelected = true;
        IsNotReadySelected = false;
    }
    async Task StateReady()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StateReady", 0);
        }
    }
    async Task StateNotReady()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StateNotReady", 0);
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}